# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql # has to match .spec.template.metadata.labels
  serviceName: "mysql"
  replicas: 3 
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container:  mysql
      labels:
        app: mysql 
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # 从 Pod 序号生成 service-id
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # 由于 server-0 有特殊意义，给 ID 加上 100 来避开
          echo servier-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # 如果 Pod 的需要为 0，则是 Master 节点，从 ConfigMap 中将 Master 节点的配置文件拷贝到 /mnt/conf.d/ 目录里
          if [[ $ordinal -eq 0 ]]; then
              cp /mnt/config-map/master.cnf /mnt/conf.d/
          else 
              cp /mnt/config-map/slave.cnf /mnt/conf.d/
          fi
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d/
        - name: config-map
          mountPath: /mnt/config-map/
      - name: clone-mysql
        image: registry.cn-hangzhou.aliyuncs.com/chenby/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # 如果目录以及存在，说明不是第一次启动
          [[ -d /vat/lib/mysql/mysql ]] && exit 0
          # Master 节点（序号0）不需要执行数据恢复工作
          [[ `hostname` =~ -([0-9+]$ )]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0]] && exit 0
          # 使用 ncat 命令从远程节点拷贝数据到本地
          ncat --recv-only mysql-$((ordinal - 1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # 执行 --prepare
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "1"
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: registry.cn-hangzhou.aliyuncs.com/chenby/xtrabackup:1.0 
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # 从备份信息文件里面读取 MASTER_LOG_FILE 和 MASTER_LOG_POS 两个字段的值
          if [[ -f xtrabackup_slave_info ]]; then
              # 将内容移动到新的文件
              mv xtrabackup_slave_info change_master_to.sql.in
              # 删除两个备份文件
              rm -f xtrabackup_binlog_info xtrabackup_slave_info
          elif [[ -f xtrabackup_binlog_info ]]; then
              # 如果存在xtrabackup_binlog_info 文件，那就说明备份来自 Master 节点，
              # 解析到 MASTER_LOG_FILE 和 MASTER_LOG_POS 两个字段的值
              [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
              rm xtrabackup_binlog_info
              # 通过解析到的两个字段的值拼接成一个语句，写入到一个新的文件中
              echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                    MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          if [[ -f change_master_to.sql.in ]]; then
              # 需要等到 mysql 启动时才能进行连接操作
              echo "waiting for mysqld to be ready (accepting connections)"
              until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

              echo "Initializing replication from clone position"
              # 修改 change_master_to.sql.in 文件名字，防止容器重启时再次执行这段动作
              mv change_master_to.sql.in change_master_to.sql.orig
              # 配置 slave 节点
              mysql -h 127.0.0.1 <<EOF
          $(< change_master_to.sql.orig),
          MASTER_HOST='mysql-0.mysql',
          MASTER_USER='root',
          MASTER_PASSWORD='',
          MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          fi

          # 监听 3307 端口，在收到传输请求时，执行 `xtrabackup --backup` 命令备份 MySQL数据并发给请求者
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
              "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: rook-ceph-block
      resources:
        requests:
          storage: 10Gi
